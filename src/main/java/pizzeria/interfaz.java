/*
    ----- Datos de Integrantes -----
    Angel Roberto Jacinto Payes         5990-20-1756
    Angelo Giovanni Vargas Lorenzo 	5990-19-21905
    Carlos Crespin 			090-12-13016
    Luis Alfredo Tejeda Hernández 	7690-22-20215
    Israel Isai Celada Valdez 		5990-20-10132
*/
/*
    ----- Información del Programa -----
    Se desarrollo un monitor que sera para repartir los recursos del buffer. 
    En el programa se implementan almacenes excluyentes por ejemplo, si un 
    consumidor o un productor este haciendo uso del almacén (buffer), 
    los demás deben esperar a que se desocupe para poder acceder.
 */

package pizzeria;       //Paquete al que pertenece el archivo.

/*Librerías importadas*/
import java.util.logging.Level;
import java.util.logging.Logger;

public class interfaz extends javax.swing.JFrame {
    /*--- Variables públicas.--- */
    public boolean estado = false;//Variable para verificar si ya inicio el programa.
    public boolean reanudar = true;//Variable para verificar si hay pausas en la simulación.
    int espacios = 16;//Declarar espacio del almacén.
    Buffer buffer = new Buffer(espacios);//Instanciar Buffer (Almacén).
    Productor producer = new Productor(buffer);//Instanciar Productor.
    Consumidor consumer1 = new Consumidor(buffer, 1);//Instanciar Consumidor 1.
    Consumidor consumer2 = new Consumidor(buffer, 2);//Instanciar Consumidor 2.
    /*-- --*/
    
    public interfaz() { //Constructor
        initComponents();   //Método que contiene lo creado para la GUI.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    /*Código generado de manera automática al momento de crear la GUI*/
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        label1 = new java.awt.Label();
        label2 = new java.awt.Label();
        label3 = new java.awt.Label();
        label4 = new java.awt.Label();
        label5 = new java.awt.Label();
        label7 = new java.awt.Label();
        label9 = new java.awt.Label();
        jLbFullBuffer = new javax.swing.JLabel();
        jLbPizzaProducer = new javax.swing.JLabel();
        jLbPizzaConsumer1 = new javax.swing.JLabel();
        jBtnIniciar = new javax.swing.JButton();
        imgProducer = new javax.swing.JLabel();
        imgConsumer1 = new javax.swing.JLabel();
        imgConsumer2 = new javax.swing.JLabel();
        jLbPizzaConsumer2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jBtnPause = new javax.swing.JButton();
        jLbCleanBuffer = new javax.swing.JLabel();
        imgPizza1 = new javax.swing.JLabel();
        imgPizza2 = new javax.swing.JLabel();
        imgPizza3 = new javax.swing.JLabel();
        imgPizza4 = new javax.swing.JLabel();
        imgPizza5 = new javax.swing.JLabel();
        jBtnSalir = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 198, 128));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        label1.setAlignment(java.awt.Label.CENTER);
        label1.setBackground(new java.awt.Color(204, 0, 0));
        label1.setFont(new java.awt.Font("Lato", 1, 14)); // NOI18N
        label1.setForeground(new java.awt.Color(255, 255, 255));
        label1.setText("Consumidor 1");
        jPanel1.add(label1, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 110, 106, -1));

        label2.setAlignment(java.awt.Label.CENTER);
        label2.setBackground(new java.awt.Color(204, 0, 0));
        label2.setFont(new java.awt.Font("Lato", 1, 14)); // NOI18N
        label2.setForeground(new java.awt.Color(255, 255, 255));
        label2.setText("Consumidor 2");
        jPanel1.add(label2, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 310, 106, -1));

        label3.setAlignment(java.awt.Label.CENTER);
        label3.setBackground(new java.awt.Color(176, 126, 49));
        label3.setFont(new java.awt.Font("Lato", 1, 14)); // NOI18N
        label3.setText("ALMACÉN");
        jPanel1.add(label3, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 110, 223, 32));

        label4.setAlignment(java.awt.Label.CENTER);
        label4.setBackground(new java.awt.Color(0, 153, 0));
        label4.setFont(new java.awt.Font("Lato", 1, 14)); // NOI18N
        label4.setForeground(new java.awt.Color(255, 255, 255));
        label4.setText("Productor");
        jPanel1.add(label4, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 110, 130, 32));

        label5.setAlignment(java.awt.Label.CENTER);
        label5.setFont(new java.awt.Font("Lato", 0, 12)); // NOI18N
        label5.setText("Comiendo Pizza de:");
        jPanel1.add(label5, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 460, 110, -1));

        label7.setFont(new java.awt.Font("Lato", 0, 12)); // NOI18N
        label7.setText("Cocinando Pizza de:");
        jPanel1.add(label7, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 310, -1, -1));

        label9.setAlignment(java.awt.Label.CENTER);
        label9.setFont(new java.awt.Font("Lato", 0, 12)); // NOI18N
        label9.setText("Comiendo Pizza de:");
        jPanel1.add(label9, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 260, 110, -1));

        jLbFullBuffer.setBackground(new java.awt.Color(255, 255, 255));
        jLbFullBuffer.setFont(new java.awt.Font("Lato", 1, 14)); // NOI18N
        jLbFullBuffer.setForeground(new java.awt.Color(204, 0, 51));
        jLbFullBuffer.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLbFullBuffer.setText("...");
        jPanel1.add(jLbFullBuffer, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 440, 220, -1));

        jLbPizzaProducer.setBackground(new java.awt.Color(255, 255, 255));
        jLbPizzaProducer.setFont(new java.awt.Font("Lato", 1, 14)); // NOI18N
        jLbPizzaProducer.setForeground(new java.awt.Color(0, 153, 0));
        jLbPizzaProducer.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLbPizzaProducer.setText("...");
        jPanel1.add(jLbPizzaProducer, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 450, 150, -1));

        jLbPizzaConsumer1.setBackground(new java.awt.Color(255, 255, 255));
        jLbPizzaConsumer1.setFont(new java.awt.Font("Lato", 1, 14)); // NOI18N
        jLbPizzaConsumer1.setForeground(new java.awt.Color(204, 0, 0));
        jLbPizzaConsumer1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLbPizzaConsumer1.setText("...");
        jPanel1.add(jLbPizzaConsumer1, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 280, 150, -1));

        jBtnIniciar.setFont(new java.awt.Font("Lato", 1, 14)); // NOI18N
        jBtnIniciar.setForeground(new java.awt.Color(0, 0, 0));
        jBtnIniciar.setText("INICIAR");
        jBtnIniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnIniciarActionPerformed(evt);
            }
        });
        jPanel1.add(jBtnIniciar, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 520, 110, -1));

        imgProducer.setIcon(new javax.swing.ImageIcon("D:\\angel\\Descargas\\productor.jpg")); // NOI18N
        jPanel1.add(imgProducer, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 150, 110, 150));

        imgConsumer1.setIcon(new javax.swing.ImageIcon("D:\\angel\\Descargas\\consumidor.jpg")); // NOI18N
        jPanel1.add(imgConsumer1, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 140, 110, 120));

        imgConsumer2.setIcon(new javax.swing.ImageIcon("D:\\angel\\Descargas\\consumidor.jpg")); // NOI18N
        jPanel1.add(imgConsumer2, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 340, 110, 120));

        jLbPizzaConsumer2.setBackground(new java.awt.Color(255, 255, 255));
        jLbPizzaConsumer2.setFont(new java.awt.Font("Lato", 1, 14)); // NOI18N
        jLbPizzaConsumer2.setForeground(new java.awt.Color(204, 0, 0));
        jLbPizzaConsumer2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLbPizzaConsumer2.setText("...");
        jPanel1.add(jLbPizzaConsumer2, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 480, 150, -1));

        jList1.setBackground(new java.awt.Color(255, 255, 255));
        jList1.setFont(new java.awt.Font("Lato", 1, 12)); // NOI18N
        jList1.setForeground(new java.awt.Color(0, 0, 0));
        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Pizza 1", "Pizza 2", "Pizza 3", "Pizza 4", "Pizza 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 150, 220, 280));

        jBtnPause.setFont(new java.awt.Font("Lato", 1, 14)); // NOI18N
        jBtnPause.setForeground(new java.awt.Color(0, 0, 0));
        jBtnPause.setText("PAUSA");
        jBtnPause.setVisible(false);
        jBtnPause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnPauseActionPerformed(evt);
            }
        });
        jPanel1.add(jBtnPause, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 520, 160, -1));

        jLbCleanBuffer.setBackground(new java.awt.Color(255, 255, 255));
        jLbCleanBuffer.setFont(new java.awt.Font("Lato", 1, 14)); // NOI18N
        jLbCleanBuffer.setForeground(new java.awt.Color(204, 0, 51));
        jLbCleanBuffer.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLbCleanBuffer.setText("...");
        jPanel1.add(jLbCleanBuffer, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 460, 220, -1));

        imgPizza1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imgPizza1.setIcon(new javax.swing.ImageIcon("D:\\angel\\Descargas\\p01.png")); // NOI18N
        imgPizza1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        imgPizza1.setVisible(false);
        jPanel1.add(imgPizza1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 340, 150, 100));

        imgPizza2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imgPizza2.setIcon(new javax.swing.ImageIcon("D:\\angel\\Descargas\\p02.jpg")); // NOI18N
        imgPizza2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        imgPizza2.setVisible(false);
        jPanel1.add(imgPizza2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 340, 150, 100));

        imgPizza3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imgPizza3.setIcon(new javax.swing.ImageIcon("D:\\angel\\Descargas\\p03.jpg")); // NOI18N
        imgPizza3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        imgPizza3.setVisible(false);
        jPanel1.add(imgPizza3, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 340, 150, 100));

        imgPizza4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imgPizza4.setIcon(new javax.swing.ImageIcon("D:\\angel\\Descargas\\p04.jpg")); // NOI18N
        imgPizza4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        imgPizza4.setVisible(false);
        jPanel1.add(imgPizza4, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 340, 150, 100));

        imgPizza5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imgPizza5.setIcon(new javax.swing.ImageIcon("D:\\angel\\Descargas\\p05.jpg")); // NOI18N
        imgPizza5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        imgPizza5.setVisible(false);
        jPanel1.add(imgPizza5, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 340, 150, 100));

        jBtnSalir.setFont(new java.awt.Font("Lato", 1, 14)); // NOI18N
        jBtnSalir.setForeground(new java.awt.Color(0, 51, 51));
        jBtnSalir.setText("SALIR");
        jBtnSalir.setVisible(false);
        jBtnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnSalirActionPerformed(evt);
            }
        });
        jPanel1.add(jBtnSalir, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 520, 110, -1));

        jLabel9.setFont(new java.awt.Font("Dialog", 1, 48)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 0, 0));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("\" PIZZAPOLIS \"");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 10, 630, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 740, 570));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /*Evento al presionar el botón INICIAR*/
    private void jBtnIniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnIniciarActionPerformed
        if (estado==false){ //Si aún no se ha ejecutado nada en la GUI.
            estado=true;    //Cambiar valor de la varaible.
            concurrencia(); //Ejecutar el metódo para ejecutar los hilos.
            jBtnPause.setVisible(true); //Ocultar el botón.
        }else{}
    }//GEN-LAST:event_jBtnIniciarActionPerformed

    /*Evento al presionar el botón PAUSA/REANUDAR*/
    private void jBtnPauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnPauseActionPerformed
        pause();    //Llamada al metódo a ejecutar.
    }//GEN-LAST:event_jBtnPauseActionPerformed

    /*Evento al presionar el botón SALIR*/
    private void jBtnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnSalirActionPerformed
        System.exit(0); //Cierra ventana, termina la ejecución.
    }//GEN-LAST:event_jBtnSalirActionPerformed
    
    /* Método Principal*/
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new interfaz().setVisible(true);//Ejecutar interfaz (GUI) creada.
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel imgConsumer1;
    private javax.swing.JLabel imgConsumer2;
    private javax.swing.JLabel imgPizza1;
    private javax.swing.JLabel imgPizza2;
    private javax.swing.JLabel imgPizza3;
    private javax.swing.JLabel imgPizza4;
    private javax.swing.JLabel imgPizza5;
    private javax.swing.JLabel imgProducer;
    private javax.swing.JButton jBtnIniciar;
    private javax.swing.JButton jBtnPause;
    private javax.swing.JButton jBtnSalir;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLbCleanBuffer;
    private javax.swing.JLabel jLbFullBuffer;
    private javax.swing.JLabel jLbPizzaConsumer1;
    private javax.swing.JLabel jLbPizzaConsumer2;
    private javax.swing.JLabel jLbPizzaProducer;
    private javax.swing.JList<String> jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private java.awt.Label label1;
    private java.awt.Label label2;
    private java.awt.Label label3;
    private java.awt.Label label4;
    private java.awt.Label label5;
    private java.awt.Label label7;
    private java.awt.Label label9;
    // End of variables declaration//GEN-END:variables
    
 /*---Metódos Desarrollados---*/
    /*Método para ejecutar los hilos: Será ejecutado mediante la acción de un botón*/
    public void concurrencia(){ 
        producer.start();   //Iniciar hilo del productor.
        consumer1.start();  //Iniciar hilo del consumidor 1.
        consumer2.start();  //Iniciar hilo del consumidor 2.
        jBtnIniciar.setVisible(false);  //Ocultar botón INICIAR.
        jBtnSalir.setVisible(true);     //Mostrar botón SALIR. 
    }
    
    /*Metódo para pausar o reanudar los hilos: Será ejecutado mediante la acción de un botón.*/
    public void pause(){    
        if (reanudar==true){            //Si los hilos estan activos.
            producer.suspend(); //Pausar hilo del productor.
            consumer1.suspend();//Pausar hilo del cosumidor 1.
            consumer2.suspend();//Pausar hilo del consumidor 2.
            reanudar=false;     //Cambiar valor de la varaible.
            jBtnPause.setText("REANUDAR");//Nuevo nombre al botón.
        }else{                          //Si los hilos estan pausados.
            producer.resume();  //Reanudar hilo del productor.
            consumer1.resume(); //Reanudar hilo del consumidor 1.
            consumer2.resume(); //Reanudar hilo del consumidor 2.
            jBtnPause.setText("PAUSA");//Nuevo nombre del botón.
            reanudar=true;      //Cambiar valor de la varaible.
        }
    }
    
    /*Clase para crear objetos "Buffer" que serán el almacén*/
    class Buffer {
        private int espacio = 0;            //Variable para el espacio en el almacén.
        private String[] buffer = null;     //Array para guardar las pizzas (buffer).
        private int entrada = 0, salida = 0;//Variables para llevar el control en las entradas y salidas del array.
        private int cont = 0, num=1;        //Variables para controlar la cantidad de pizzas almacenadas.

        public Buffer(int espacio) {        //Constructor del Buffer
            this.espacio = espacio;
            buffer = new String[espacio];
        }

        /*Estado Crítico:  Método para insertar pizzas en el almacén.*/
        public synchronized void insertar(String pizza) {	
            while (cont == espacio) //Condición para verificar si el buffer se encuentra lleno.
                try {
                    jLbFullBuffer.setText("Almacén LLeno"); //Mensaje Indicando que el almacén esta Lleno.
                    wait();
                } catch (InterruptedException e) {          //Excepción por posible error.
                    System.err.println("wait interrumpido");
                }
            jLbFullBuffer.setText("");                              //Limpiar mensaje del buffer LLeno.
            buffer[entrada] = num+" "+pizza;                        //Almacenando la pizza el array.
            //Ingresando pizzas a la jList1, que es la que simula el almacén.
            jList1.setModel(new javax.swing.AbstractListModel<String>() {
                public int getSize() { return buffer.length; }  //Obtenido el ancho del buffer.
                public String getElementAt(int i) { return buffer[i]; } //Insertando cadena (pizza) a la jList.
            });
            entrada = (entrada + 1) % espacio; //Actualizando número de posiciones.
            cont++;                            //Actulizando contandor para comprobar estado.
            num++;                             //Actulizando valor del número de pizza producida.
            notifyAll(); //Cediendo paso a otros hilos (bandera).
        }

        /*Estado Crítico: Metódo para extraer una pizza del almacén.*/
        public synchronized String extraer() {
            String pizza;   //Variable para guardar la pizza que se esta extrayendo.
            while (cont == 0) //condición para validar si el buffer se encuentra vacío.
                try {
                    jLbCleanBuffer.setText("Almacén Vacío");   //Mensaje para indicar que el almacén esta vacío.
                    wait();                                    //Liberar acceso a la zona.
                } catch (InterruptedException e) {      //Excepción por posibles errores.
                    System.err.println("wait interrumpido");
                }
            jLbCleanBuffer.setText("");//Limpiar mensaje de alamacén vacío.
            pizza = buffer[salida];         //Tomando la pizza del array.
            salida = (salida + 1) % espacio;//Actullizando el valor.
            cont--;                         //Actualizando valor del contador.
            notifyAll();                    //Cediendo paso a otros hilos (bandera).
            return pizza;   //Extracción de la pizza del alamacén (buffer).
        }	
    }

    /*Clase para crear objetos "Productor" que serán los chef de pizzas.*/
    class Productor extends Thread{//implements Runnable {
        private Buffer almacen = null;//Buffer
        private String[] pizzas = {"Pepperoni", "Margarita", "Jamon y Queso", "Jamon y Hongos", "Suprema"};//Posibles pizzas para producir.

        public Productor(Buffer almacen) {  //Constructor
            this.almacen = almacen;
        }

        public void run() { //LLamada run para la ejecución de su proceso (Insertar pizzas al almacén). 
            int i;              //Variable para guaradar un número.
            String nuevaPizza;  //Variable para guaradar la nueva pizza a crear.
            while (true) {      //Mientras sea verdadero.
                i = (int)(Math.random()*pizzas.length);//Generar un número al azar.
                nuevaPizza = pizzas[i];//Tomar la pizza en la posicion según el número al azar.
                /*Condicional con switch para saber la imagen de la pizza a mostrar*/
                switch(i){  //Se esta utilizando la variable "i", con el comando Switch, ya que dicha varibale tiene la posicion del array de alguna pizza.
                    case 0:
                        imgPizza1.setVisible(true); //Mostrar imagen (Pizza Pepperoni).
                        imgPizza2.setVisible(false);//Oocultar imagen.
                        imgPizza3.setVisible(false);//Oocultar imagen.
                        imgPizza4.setVisible(false);//Oocultar imagen.
                        imgPizza5.setVisible(false);//Oocultar imagen.
                        break;
                    case 1:
                        imgPizza2.setVisible(true); //Mostrar imagen (Pizza Margarita).
                        imgPizza1.setVisible(false);//Oocultar imagen.
                        imgPizza3.setVisible(false);//Oocultar imagen.
                        imgPizza4.setVisible(false);//Oocultar imagen.
                        imgPizza5.setVisible(false);//Oocultar imagen.
                        break;
                    case 2:
                        imgPizza3.setVisible(true); //Mostrar imagen (Pizza Jamón y Queso).
                        imgPizza1.setVisible(false);//Oocultar imagen.
                        imgPizza2.setVisible(false);//Oocultar imagen.
                        imgPizza4.setVisible(false);//Oocultar imagen.
                        imgPizza5.setVisible(false);//Oocultar imagen.
                        break;
                    case 3:
                        imgPizza4.setVisible(true); //Mostrar imagen (Pizza Jamón y Hongos).
                        imgPizza1.setVisible(false);//Oocultar imagen.
                        imgPizza2.setVisible(false);//Oocultar imagen.
                        imgPizza3.setVisible(false);//Oocultar imagen.
                        imgPizza5.setVisible(false);//Oocultar imagen.
                        break;
                    case 4:
                        imgPizza5.setVisible(true); //Mostrar imagen (Pizza Suprema).
                        imgPizza1.setVisible(false);//Oocultar imagen.
                        imgPizza2.setVisible(false);//Oocultar imagen.
                        imgPizza3.setVisible(false);//Oocultar imagen.
                        imgPizza4.setVisible(false);//Oocultar imagen.
                        break;
                }
                jLbPizzaProducer.setForeground(new java.awt.Color(252, 3, 3));//Color del jLabel 5.
                jLbPizzaProducer.setText(nuevaPizza);//Mostar en la interfaz la Pizza que se esta produciendo.
                almacen.insertar(nuevaPizza);//Agregar nueva pizza al almacén (buffer).
                try {                               //Simulación de la espera de la preparación de la pizza.
                    Thread.sleep(1000);//Tiempo de espera.
                    jLbPizzaProducer.setForeground(new java.awt.Color(252, 252, 252));////Color del texto del jLabel.
                    Thread.sleep(500);//Tiempo de espera.
                    jLbPizzaProducer.setForeground(new java.awt.Color(0, 153, 0));//Color del texto del jLabel.
                    Thread.sleep(500);//Tiempo de espera.
                } catch (InterruptedException ex) { //Excepción por posibles errores.
                    Logger.getLogger(interfaz.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } 
    }
    
    /*Clase para crear objetos "Consumidor" que serán los clientes*/
    class Consumidor extends Thread{//implements Runnable {  
        private Buffer almacen = null;  //Variable que es para utilizar el buffer.
        private int no = 0;             //Variable para llevar el control de cuantas pizzas se van almacenando en el buffer(alamcén).
        
        public Consumidor(Buffer almacen, int no) {  //Constructor.
            this.almacen = almacen;
            this.no = no;
        }

        public void run() {   
            String consumirPizza;   //Variable pra guaradar la pizza a consumir. 
            while (true) {  //Mientras se verdadero.
                consumirPizza = almacen.extraer();//Entrar al estado crítico para sacar pizza del almacén.
                if (no==1){ //Condicional para verificar que consumidor es.
                    jLbPizzaConsumer1.setForeground(new java.awt.Color(0, 153, 0));//Color del texto del jLabel.
                    jLbPizzaConsumer1.setText(consumirPizza);
                }else{
                    jLbPizzaConsumer2.setForeground(new java.awt.Color(0, 153, 0));////Color del texto del jLabel.
                    jLbPizzaConsumer2.setText(consumirPizza);
                }
                try {
                    if (no==1){//Condicional para verificar que consumidor es.
                        Thread.sleep(2800);//Tiempo de espera.
                        jLbPizzaConsumer1.setForeground(new java.awt.Color(252, 252, 252));//Color del texto del jLabel.
                        Thread.sleep(2800);//Tiempo de espera.
                    }else{
                        Thread.sleep(2800);//Tiempo de espera.
                        jLbPizzaConsumer2.setForeground(new java.awt.Color(252, 252, 252));//Color del texto del jLabel.
                        Thread.sleep(2800);//Tiempo de espera.
                        jLbPizzaConsumer2.setForeground(new java.awt.Color(204, 0, 0));//Color del texto del jLabel.
                        jLbPizzaConsumer2.setText("...");//Mensaje a mostrar en el label, una vez ya consumida la pizza.
                    }
                } catch (InterruptedException ex) { //Excepción por posibles errores.
                    Logger.getLogger(interfaz.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }
    /*---  ---*/
}
